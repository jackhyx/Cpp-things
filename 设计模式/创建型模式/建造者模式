### *Builder 模式*
#### 功能：
* 当我们要创建的对象很复杂的时候（通常是由很多其他的对象组合而成），我们要复杂对象的创建过程和这个对象的表示（展示）分离开来，
* 这样做的好处就是通过一步步的进行复杂对象的构建
* 由于在每一步的构造过程中可以引入参数，使得经过相同的步骤创建最后得到的对象的展示不一样。
  针对这种对象成员较多，创建对象逻辑较为繁琐的场景，非常适合使用建造者模式来进行优化。
  建造者模式的作用有如下几个：
* 封装复杂对象的创建过程，使对象使用者不感知复杂的创建逻辑。
* 可以一步步按照顺序对成员进行赋值，或者创建嵌套对象，并最终完成目标对象的创建。
* 对多个对象复用同样的对象创建逻辑。
* 其中，第1和第2点比较常用，下面对建造者模式的实现也主要是针对这两点进行示例


### 对于 Go 语言来说，最常见地表现就是多层的嵌套实例化：
* 上述的对象创建方法有两个明显的缺点：
* 对使用者不友好，使用者在创建对象时需要知道的细节太多
* 代码可读性很差。



```
// demo/service/registry/model/service_profile.go
// 关键点1: 为ServiceProfile定义一个Builder对象
type serviceProfileBuild struct {
    // 关键点2: 将ServiceProfile作为Builder的成员属性
 profile *ServiceProfile
}

// 关键点3: 定义构建ServiceProfile的方法
func (s *serviceProfileBuild) WithId(id string) *serviceProfileBuild {
 s.profile.Id = id
    // 关键点4: 返回Builder接收者指针，支持链式调用
 return s
}

func (s *serviceProfileBuild) WithType(serviceType ServiceType) *serviceProfileBuild {
 s.profile.Type = serviceType
 return s
}

func (s *serviceProfileBuild) WithStatus(status ServiceStatus) *serviceProfileBuild {
 s.profile.Status = status
 return s
}

func (s *serviceProfileBuild) WithEndpoint(ip string, port int) *serviceProfileBuild {
 s.profile.Endpoint = network.EndpointOf(ip, port)
 return s
}

func (s *serviceProfileBuild) WithRegion(regionId, regionName, regionCountry) *serviceProfileBuild {
    s.profile.Region = &Region{Id: regionId, Name: regionName, Country: regionCountry}
 return s
}

func (s *serviceProfileBuild) WithPriority(priority int) *serviceProfileBuild {
 s.profile.Priority = priority
 return s
}

func (s *serviceProfileBuild) WithLoad(load int) *serviceProfileBuild {
 s.profile.Load = load
 return s
}

// 关键点5: 定义Build方法，在链式调用的最后调用，返回构建好的ServiceProfile
func (s *serviceProfileBuild) Build() *ServiceProfile {
 return s.profile
}

// 关键点6: 定义一个实例化Builder对象的工厂方法
func NewServiceProfileBuilder() *serviceProfileBuild {
 return &serviceProfileBuild{profile: &ServiceProfile{}}
}
```
#### 实现建造者模式有 6 个关键点：
* 为 ServiceProfile 定义一个 Builder 对象 serviceProfileBuild，通常我们将它设计为包内可见，来限制客户端的滥用。 
* 把需要构建的 ServiceProfile 作为 Builder 对象 serviceProfileBuild 的成员属性，用来存储构建过程中的状态。 
* Builder 对象 serviceProfileBuild 定义用来构建 ServiceProfile 的一系列方法，上述代码中我们使用了 WithXXX 的风格。 
* 在构建方法中返回 Builder 对象指针本身，也即接收者指针，用来支持链式调用，提升客户端代码的简洁性。 
* 为 Builder 对象定义 Build() 方法，返回构建好的 ServiceProfile 实例，在链式调用的最后调用。 
* 定义一个实例化 Builder 对象的工厂方法 NewServiceProfileBuilder()。

#### “Go 风格”的建造者模式实现。
* 我们可以通过 Functional Options 模式 来优化。
* Functional Options 模式也是用来构建对象的，这里我们也把它看成是建造者模式的一种扩展。
* 它利用了 Go 语言中函数作为一等公民的特点，结合函数的可变参数，达到了优化上述 2 个改进点的目的。
使用 Functional Options 模式的实现是这样的：
```
// demo/service/registry/model/service_profile_functional_options.go
// 关键点1: 定义构建ServiceProfile的functional option，以*ServiceProfile作为入参的函数
type ServiceProfileOption func(profile *ServiceProfile)

// 关键点2: 定义实例化ServiceProfile的工厂方法，使用ServiceProfileOption作为可变入参
func NewServiceProfile(svcId string, svcType ServiceType, options ...ServiceProfileOption) *ServiceProfile {
    // 关键点3: 可为特定的字段提供默认值
 profile := &ServiceProfile{
  Id:       svcId,
  Type:     svcType,
  Status:   Normal,
  Endpoint: network.EndpointOf("192.168.0.1", 80),
  Region:   &Region{Id: "region1", Name: "beijing", Country: "China"},
  Priority: 1,
  Load:     100,
 }
    // 关键点4: 通过ServiceProfileOption来修改字段
 for _, option := range options {
  option(profile)
 }
 return profile
}

// 关键点5: 定义一系列构建ServiceProfile的方法，在ServiceProfileOption实现构建逻辑，并返回ServiceProfileOption
func Status(status ServiceStatus) ServiceProfileOption {
 return func(profile *ServiceProfile) {
  profile.Status = status
 }
}

func Endpoint(ip string, port int) ServiceProfileOption {
 return func(profile *ServiceProfile) {
  profile.Endpoint = network.EndpointOf(ip, port)
 }
}

func SvcRegion(svcId, svcName, svcCountry string) ServiceProfileOption {
 return func(profile *ServiceProfile) {
  profile.Region = &Region{
   Id:      svcId,
   Name:    svcName,
   Country: svcCountry,
  }
 }
}

func Priority(priority int) ServiceProfileOption {
 return func(profile *ServiceProfile) {
  profile.Priority = priority
 }
}

func Load(load int) ServiceProfileOption {
 return func(profile *ServiceProfile) {
  profile.Load = load
 }
}

```
### 实现 Functional Options 模式有 5 个关键点：
* 定义 Functional Option 类型 ServiceProfileOption，本质上是一个入参为构建对象 ServiceProfile 的指针类型。（注意必须是指针类型，值类型无法达到修改目的） 
* 定义构建 ServiceProfile 的工厂方法，以 ServiceProfileOption 的可变参数作为入参。函数的可变参数就意味着可以不传参，因此一些必须赋值的属性建议还是定义对应的函数入参。 
* 可为特定的属性提供默认值，这种做法在 为配置对象赋值的场景 比较常见。 
* 在工厂方法中，通过 for 循环利用 ServiceProfileOption 完成构建对象的赋值。 
* 定义一系列的构建方法，以需要构建的属性作为入参，返回 ServiceProfileOption 对象，并在ServiceProfileOption 中实现属性赋值。


```
//Product.h 
#ifndef _PRODUCT_H_
#define _PRODUCT_H_

class Product
{
public:
    Product();
    ~Product();
    void ProducePart();
protected:  // 可以被继承访问
private:
};

class ProductPart
{
public:
    ProductPart();
    ~ProductPart();
    ProductPart* BuildPart();
protected:
private:
};
#endif //~_PRODUCT_H_


//Component.cpp
#include "Component.h"
// 一系列函数的定义
Component::Component()
{
}

Component::~Component()
{
}

void Component::Add(const Component&
com)
{
}

Component* Component::GetChild(int index)
{
    return 0;
}

void Component::Remove(const Component&
com)
{
}


//Builder.h 
#ifndef _BUILDER_H_
#define _BUILDER_H_
#include <string>
using namespace std;
class Product;
// Builder基类
class Builder
{
public:
    virtual ~Builder();
// 都声明为纯虚函数
    virtual void BuildPartA(const string&
    buildPara) = 0;
    virtual void BuildPartB(const string&
    buildPara) = 0;
    virtual void BuildPartC(const string&
    buildPara) = 0;
    virtual Product* GetProduct() = 0;
// 保护：可以被继承访问，不能被外部访问；
protected:
    Builder();
private:
};

// ConcreteBuilder : Builder子类
class ConcreteBuilder:public Builder
{
public:
    ConcreteBuilder();
    ~ConcreteBuilder();
    void BuildPartA(const string&
    buildPara);
    void BuildPartB(const string& buildPara);
    void BuildPartC(const string& buildPara);
    Product* GetProduct();
protected:
private:
};
#endif //~_BUILDER_H_


//Builder.cpp 
#include "Builder.h"
#include "Product.h"
#include <iostream>
using namespace std;
// 实际实现
Builder::Builder()
{
}
Builder::~Builder()
{
}
ConcreteBuilder::ConcreteBuilder()
{
}
ConcreteBuilder::~ConcreteBuilder()
{
}
void ConcreteBuilder::BuildPartA(const string& buildPara)
{
    cout<<"Step1:Build PartA..."<<buildPara<<endl;
}
void ConcreteBuilder::BuildPartB(const string& buildPara)
{
    cout<<"Step1:Build PartB..."<<buildPara<<endl;
}
void ConcreteBuilder::BuildPartC(const string& buildPara)
{
    cout<<"Step1:Build PartC..."<<buildPara<<endl;
}

Product* ConcreteBuilder::GetProduct()
{
    BuildPartA("pre-defined");
    BuildPartB("pre-defined");
    BuildPartC("pre-defined");
    return new Product();
}

//Director.h 
#ifndef _DIRECTOR_H_
#define _DIRECTOR_H_
class Builder;
class Director
{
public:
    Director(Builder* bld);
    ~Director();
    void Construct();
protected:
private:
    Builder* _bld;
};
#endif //~_DIRECTOR_H_


//Director.cpp 
#include "director.h"
#include "Builder.h"
Director::Director(Builder* bld)
{
    _bld = bld;
}
Director::~Director()
{

}
void Director::Construct()
{
    _bld->BuildPartA("user-defined");
    _bld->BuildPartB("user-defined");
    _bld->BuildPartC("user-defined");
}
// 强调的是一步步创建对象，并通过相同的创建过程可以获得不同的结果对象
//main.cpp 
#include "Builder.h"
#include "Product.h"
#include "Director.h"
#include <iostream>
using namespace std;
int main(int argc,char* argv[])
{
    Director* d = new Director(new ConcreteBuilder());
    d->Construct();
    return 0;
}

```
*Prototype  模式*

#### 总结：

* Builder 模式的关键是其中的 Director对象并不直接返回对象，而是通过一步步（BuildPartA，BuildPartB，BuildPartC）来一步步进行对象的创建。
* Builder 模式的示例代码中，BuildPart 的参数是通过客户程序员传入的，这里使用“user-defined”代替，实际的可在 Construct 方法中传入这 3 个参数，这样就可以得到不同的细微差别的复杂对象了。
* Builder 模式和 AbstractFactory 模式在功能上很相似，因为都是用来创建大的复杂的对象，它们的区别是Builder 模式强调的是一步步创建对象，并通过相同的创建过程可以获得不同的结果对象，一般来说 Builder 模式中对象不是直接返回的。而在 AbstractFactory 模式中对象是直接返回的，AbstractFactory 模式强调的是为创建多个相互依赖的对象提供一个同一的接口。

#### 优缺点
#### 优点
* 将复杂的构建逻辑从业务逻辑中分离出来，遵循了单一职责原则。 
* 可以将复杂对象的构建过程拆分成多个步骤，提升了代码的可读性，并且可以控制属性构建的顺序。 
* 对于有多种构建方式的场景，可以将 Builder 设计为一个接口来提升可扩展性。 
* Go 语言中，利用 Functional Options 模式可以更为简洁优雅地完成复杂对象的构建。
#### 缺点
* 传统的建造者模式需要新增一个 Builder 对象来完成对象的构造，Fluent API 模式下甚至还要额外增加多个 Fluent 接口，一定程度上让代码更加复杂了。
* 与其他模式的关联 
* 抽象工厂模式和建造者模式类似，两者都是用来构建复杂的对象，但前者的侧重点是构建对象/产品族，后者的侧重点是对象的分步构建过程。
