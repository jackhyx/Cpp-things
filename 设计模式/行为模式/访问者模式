### *Visitor 模式（访问者模式）

访问者模式（VisitorPattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。
主要将数据结构与数据操作分离，解决数据结构和操作耦合性问题

#### 基本工作原理:
* 在被访问的类里面加一个对外提供接待访问者的接口
* 
#### 应用场景是：
* 需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，同时需要避免让这些操作"污染"这些对象的类，可以选用访问者模式解决
* 
#### 总结：
* 假设我们要添加一个Wait的状态类，考察Man类和Woman类的反应，由于使用了双分派，只需增加一个Action子类即可在客户端调用即可，不需要改动任何其他类的代码
##### 优点：
* 访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高 
* 访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统
##### 缺点：
* 具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的, 这样造成了具体元素变更比较困难 
* 违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素 
* 因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的

```
#include <iostream>
#include <list>

    class Man;
    class Woman;
    using namespace std;

    class Action
    {
    public:
        virtual void getManResult(Man* man) =0;
        virtual void getWomanResult(Woman* woman) =0;

    private:
    };

    class Success:public Action
    {
    public:
        void getManResult(Man* man) override
        {
            cout << "男人的给的评价该歌手是很成功" << endl;
        }

        void getWomanResult(Woman* woman) override
        {
            cout << "女人的给的评价该歌手是很成功" << endl;
        }
    };

    class Fail :public Action
    {
    public:
        void getManResult(Man* man) override
        {
            cout << "男人的给的评价该歌手是失败" << endl;
        }

        void getWomanResult(Woman* woman) override
        {
            cout << "女人的给的评价该歌手是失败" << endl;
        }
    };

    class Person
    {
    public:
        //提供一个方法让访问者可以访问
        virtual void accept(Action* action) = 0;
    };

//这里用用到了双分派，即首先在客户端程序中，将具体的状态作为参数传递进Man中（第一次分派）
//然后在Man中调用作为参数的“具体方法” getManResult同时将自己作为参数传入完成第二次分派
    class Man:public Person
    {
    public:
        void accept(Action* action) override
        {
            action->getManResult(this);
        }
    };

    class Woman: public Person
    {
    public:
        void accept(Action* action) override
        {
            action->getWomanResult(this);
        }
    };

//数据结构，管理很多人（Man、Woman）用来装符合某一个评价的所有人
    class ObjectStructure
    {
    public:
        //添加到list
        void attach(Person* p)
        {
            persons.push_back(p);
        }
        //移除
        void detach(Person* p)
        {
            persons.remove(p);
            delete p;
        }

        //显示测评情况
        void display(Action* action)
        {
            for (auto value : persons)
            {
                value->accept(action);
            }
        }
    private:
        list<Person*> persons;
    };

    int main(int argc, char* argv[])
    {
        //创建ObjectStructure（可以创建很多个不同的ObjectStructure来代表不同评价，然后把同样评价的人放到一个ObjectStructure中）
        auto* objectStructure = new ObjectStructure;
        objectStructure->attach(new Man);
        objectStructure->attach(new Woman);

        //假如歌手获得成功
        auto* success = new Success;
        objectStructure->display(success);
        cout << "=======================" << endl;
        //假如歌手失败了
        Fail* fail = new Fail;
        objectStructure->display(fail);
        return 0;
    }
```