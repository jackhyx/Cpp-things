*命令模式*

请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。
Command 模式的最终目的就是将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。
#### 角色

* Invoker 是调用者角色
* Command 是命令角色，需要执行的所有命令都在这里
* Receiver 是接受者角色，知道如何实施和执行一个请求相关的操作
* ConcreteCommand 将接受者对象与一个动作绑定，调用接受者相应的操作


```
//命令模式
#include <iostream>
#include <queue>
#include <Windows.h>
    using namespace std;

//协议处理类    （请求类）
    class HandleClinetProtocal
    {
    public:
        //处理增加金币
        void AddMoney()
        {
            cout << "给玩家增加金币" << endl;
        }
        //处理增加钻石
        void AddDiamond()
        {
            cout << "给玩家增加钻石" << endl;
        }
        //处理玩家装备
        void AddEquipment()
        {
            cout << "给玩家穿装备" << endl;
        }
        //玩家升级
        void AddLevel()
        {
            cout << "给玩家升级" << endl;
        }
    };

//命令接口
    class AbstractCommand
    {
    public:
        //相当于execute（）
        virtual void handle() = 0;
    };


//下面是把每个功能都封装为一个请求对象
//处理增加金币请求
    class AddMoneyCommand:public AbstractCommand
    {
    public:
        AddMoneyCommand(HandleClinetProtocal* protocal)
        {
            this->pProtocol = protocal;
        }
        virtual void handle()
        {
            this->pProtocol->AddMoney();
        }
    public:
        HandleClinetProtocal* pProtocol;
    };

//处理增加钻石请求
    class AddDiamondCommand :public AbstractCommand
    {
    public:
        AddDiamondCommand(HandleClinetProtocal* protocal)
        {
            this->pProtocol = protocal;
        }
        virtual void handle()
        {
            this->pProtocol->AddDiamond();
        }
    public:
        HandleClinetProtocal* pProtocol;
    };

//处理玩家装备请求
    class AddEquipmentCommand :public AbstractCommand
    {
    public:
        AddEquipmentCommand(HandleClinetProtocal* protocal)
        {
            this->pProtocol = protocal;
        }
        virtual void handle()
        {
            this->pProtocol->AddEquipment();
        }
    public:
        HandleClinetProtocal* pProtocol;
    };

//处理玩家升级请求
    class AddLevelCommand :public AbstractCommand
    {
    public:
        AddLevelCommand(HandleClinetProtocal* protocal)
        {
            this->pProtocol = protocal;
        }
        virtual void handle()
        {
            this->pProtocol->AddLevel();
        }
    public:
        HandleClinetProtocal* pProtocol;
    };

//服务器程序   （命令调用类）
    class Server
    {
    public:
        //将请求对象放入处理队列
        void addRequest(AbstractCommand* command)
        {
            mCommands.push(command);
        }

        //启动处理程序
        void startHandle()
        {
            while (!mCommands.empty())
            {
                Sleep(2000);
                AbstractCommand* command = mCommands.front();
                command->handle();
                mCommands.pop();
            }
        }
        queue<AbstractCommand*> mCommands;
    };

    void test01()
    {
        HandleClinetProtocal* protocal = new HandleClinetProtocal;
        //客户端增加金币的请求
        AbstractCommand* addmoney = new AddMoneyCommand(protocal);
        //客户端增加钻石的请求
        AbstractCommand* adddiamond = new AddDiamondCommand(protocal);
        //客户端穿装备的请求
        AbstractCommand* addequipment = new AddEquipmentCommand(protocal);
        //客户端升级请求
        AbstractCommand* addlevel = new AddLevelCommand(protocal);

        //将客户端的请求加入到请求队列中
        Server* server = new Server;
        server->addRequest(addmoney);
        server->addRequest(adddiamond);
        server->addRequest(addequipment);
        server->addRequest(addlevel);

        //服务器开始处理请求
        server->startHandle();
    }


    int main()
    {
        test01();
        return 0;
    }


```