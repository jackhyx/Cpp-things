1.内部实现

字符串对象底层的数据结构实现主要是int和简单动态字符串SDS;

字符串对象的内部编码有3种 ：int、raw和embstr。Redis会根据当前值的类型和长度来决定使用哪种编码来实现

1.1 字符串对象保存：整数值
可以用long类型来表示
字符串对象会将整数值保存在字符串对象结构的ptr属性里面(将void*转换成1ong)
将字符串对象的编码设置为int

1.2 字符串对象保存：字符串值
字符串值的长度大于32字节
字符串对象使用一个简单动态字符串(SDS)保存
将对象的编码设置为raw

1.3 字符串对象保存：字符串值
字符申值的长度小于等于32字节
字符串对象将使用一个简单动态字符串(SDS)来保存
将对象的编码设置为embstr

1.4 embstr优点：
embstr编码是专门用于保存短字符串的一种优化编码方式
embstr和raw编码都会使用SDS来保存值
不同之处：embstr会通过一次内存分配函数来分配一块连续的内存空间来保存redisObject和SDS；
raw编码会通过调用两次内存分配函数来分别分配两块空间来保存redisObject和SDS；

embstr编码将创建字符串对象所需的内存分配次数从raw编码的两次降低为一次
释放 embstr编码的字符串对象同样只需要调用一次内存释放函数
因为embstr编码的字符串对象的所有数据都保存在一块连续的内存里面可以更好的利用CPU缓存提升性能

2.常用命令

设置值-set
获取-get
批量设置-MSET
批量获取-MGET


3.使用场景
3.1 作为缓存层
Redis经常作为缓存层，来缓存一些热点数据。来加速读写性能从而降低后端的压力。一般在读取数据的时候会先从Redis中读取，如果Redis中没有，再从数据库中读取。

3.2 计数器\限速器\分布式ID
主要是利用Redis字符串自增自减的特性。

计数器：经常可以被用来做计数器，如微博的评论数、点赞数、分享数，抖音作品的收藏数，京东商品的销售量、评价数等。
限速器：如验证码接口访问频率限制，用户登陆时需要让用户输入手机验证码，从而确定是否是用户本人，但是为了短信接口不被频繁访问，会限制用户每分钟获取验证码的频率，例如一分钟不能超过5次。
分布式ID：由于Redis自增自减的操作是原子性的因此也经常在分布式系统中用来生成唯一的订单号、序列号等

3.3 分布式系统共享session

3.4 二进制存储
由于Redis字符串可以存储二进制数据的特性，因此也可以用来存储一些二进制数据。如图片、 音频、 视频等
