## 回溯是递归的副产品，只要有递归就会有回溯

## 回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案

## 回溯法，一般可以解决如下几种问题：

组合问题：N个数里面按一定规则找出k个数的集合
切割问题：一个字符串按一定规则有几种切割方式
子集问题：一个N个数的集合里有多少符合条件的子集
排列问题：N个数按一定规则全排列，有几种排列方式
棋盘问题：N皇后，解数独等等

void backtracking(参数) {
    if (终止条件) {
        存放结果;
        return;
    }

    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，选择列表); // 递归
        回溯，撤销处理结果
    }
}

### 组合问题：N个数里面按一定规则找出k个数的集合
## 77. 组合
给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。
你可以按 任何顺序 返回答案。
#
class Solution {
private:
        vector<vector<int>> result;
        vector<int> path;

        void backtracking(int n, int k, int startIndex) {
            if (path.size() == k) {             //终止条件
                result.push_back(path);         //存放结果
                return;
            }
            for (int i = startIndex; i <= n - (k - path.size()) + 1; i++) {
           
                path.push_back(i);              //处理节点
                backtracking (n, k, i + 1);     //递归
                path.pop_back();                //回溯
            }
    }


public:
        vector<vector<int>> combine(int n, int k) {
        
        backtracking(n, k, 1);
        
        return result;

    }
};
#
#
## 216. 组合总和 III
找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：
只使用数字1到9
每个数字 最多使用一次 
返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。
#
class Solution {
private:
        vector<vector<int>> result;
        vector<int> path;
        void backtracking(int n, int k, int sum, int startIndex) {
        
            if (sum > n) return;                  //剪枝操作
            
            if (path.size() == k) {               //终止条件
                if (sum == n) 
                result.push_back(path);           //存放结果
                return;
            }
                                                  // 9-（k - path.size()） + 1 剪枝操作
            for (int i = startIndex; i <= 9 - (k - path.size()) + 1; i++) {

                sum += i;
                path.push_back(i);                //处理

                backtracking (n, k , sum, i + 1); // 递归

                sum -= i;                         // 回溯
                path.pop_back();
            }


        }
public:
    vector<vector<int>> combinationSum3(int k, int n) {    

        result.clear();
        path.clear();

        backtracking(n, k, 0, 1);
        return result;   
    }
};
#
#
## 17. 电话号码的字母组合
给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。
给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。
#
class Solution {
private:
    const string letterMap[10] = {
        "", // 0
        "", // 1
        "abc", // 2
        "def", // 3
        "ghi", // 4
        "jkl", // 5
        "mno", // 6
        "pqrs", // 7
        "tuv", // 8
        "wxyz", // 9
    };    
public:
    vector<string> result;
    string s;
    void backtracking(const string& digits, int index) {
        if (index == digits.size()) {       //终止条件
            result.push_back(s);            //存放结果
            return;
        }

        int digit = digits[index] - '0';    // 将index指向的数字转为int
        string letters = letterMap[digit];  // 取数字对应的字符集

        for (int i = 0; i < letters.size(); i++) {
            s.push_back(letters[i]);        //处理  
            backtracking(digits, index + 1);//递归
            s.pop_back();                   //回溯   
        }

    }
    vector<string> letterCombinations(string digits) {

        s.clear();
        result.clear();

        if (digits.size() == 0) {
            return result;
        }

        backtracking (digits, 0);

        return result;
    }
};
#
#

