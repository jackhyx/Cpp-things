## 回溯是递归的副产品，只要有递归就会有回溯

## 回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案

## 回溯法，一般可以解决如下几种问题：

组合问题：N个数里面按一定规则找出k个数的集合
切割问题：一个字符串按一定规则有几种切割方式
子集问题：一个N个数的集合里有多少符合条件的子集
排列问题：N个数按一定规则全排列，有几种排列方式
棋盘问题：N皇后，解数独等等

void backtracking(参数) {
    if (终止条件) {
        存放结果;
        return;
    }

    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，选择列表); // 递归
        回溯，撤销处理结果
    }
}

### 切割问题：一个字符串按一定规则有几种切割方式
131. 分割回文串
给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。
回文串 是正着读和反着读都一样的字符串。
#
class Solution {
private:
    vector<string> path;
    vector<vector<string>> result;
    void backtracking (const string& s, int startIndex) {

        if (startIndex >= s.size()) {
            result.push_back(path);
            return;
        }

        for (int i = startIndex; i < s.size(); i++) {
            if (isPalindrome(s, startIndex, i)) {
                string str = s.substr(startIndex, i - startIndex + 1);
                path.push_back(str);

                backtracking (s, i + 1);
                
                path.pop_back();
            }
        }
    }

    bool isPalindrome(const string& s, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            if (s[i] != s[j]) {
                return false;
            }
        }
        return true;
    }

public:
    vector<vector<string>> partition(string s) {
        result.clear();
        path.clear();
        backtracking(s, 0);
        return result;

    }
};
#
#
##93. 复原 IP 地址
有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 '.' 分隔。
例如："0.1.2.201" 和 "192.168.1.1" 是 有效 IP 地址，但是 "0.011.255.245"、"192.168.1.312" 和 "192.168@1.1" 是无效IP地址。
给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效IP地址，这些地址可以通过在 s 中插入'.'来形成。
你不能重新排序或删除s中的任何数字。你可以按任何顺序返回答案。
#
class Solution {
private:   
        vector<string> result;
        void backtracking (string& s, int startIndex, int pointNum) {

            if (pointNum == 3) {
                if (isValid(s, startIndex, s.size() - 1)) {
                    result.push_back(s);
                }
                return;
            }
            
            for (int i = startIndex; i < s.size(); i++) {

                if (isValid(s, startIndex, i)) {
                    s.insert(s.begin() + i + 1, '.');
                    pointNum++;

                    backtracking(s, i + 2, pointNum);
                    
                    pointNum--;
                    s.erase(s.begin() + i + 1);

                } else break;
            }
            


        }

        bool isValid (const string& s, int start, int end) {
            if (start > end) {
                return false;
            }
            if (s[start] == '0' && start != end) {
                return false;
            }
            int num = 0;
            for (int i = start; i <= end; i++) {
                if(s[i] > '9' || s[i] < '0') {
                    return false;
                }
                num = num * 10 + (s[i] - '0');
                if (num > 255) {
                    return false;
                }
            }
            return true;
        }
public:
    vector<string> restoreIpAddresses(string s) {
        result.clear();
        if (s.size() > 12) return result;
        backtracking(s, 0, 0);
        return result;

    }
};
