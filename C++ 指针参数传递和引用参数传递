## C++中的指针参数传递和引用参数传递有什么区别？底层原理你知道吗？

# 指针参数传递本质上是值传递，它所传递的是一个地址值。

值传递过程中，被调函数的形式参数作为被调函数的局部变量处理# 会在栈中开辟内存空间以存放由主调函数传递进来的实参值 #从而形成了实参的一个副本（替身）；

值传递的特点是 # 被调函数对形式参数的任何操作都是作为局部变量进行的，不会影响主调函数的实参变量的值（形参指针变了，实参指针不会变） #

# 引用参数传递过程中，被调函数的形式参数也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。

被调函数对形参（本体）的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量（根据别名找到主调函数中的本体）。

因此，被调函数对形参的任何操作都会影响主调函数中的实参变量。

# 引用传递和指针传递是不同的
虽然他们都是在被调函数栈空间上的一个局部变量
# 任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量
# 而对于指针传递的参数，如果改变被调函数中的指针地址，它将应用不到主调函数的相关变量。如果想通过指针参数传递来改变主调函数中的相关变量（地址），那就得使用指向指针的指针或者指针引用。

# 从编译的角度来讲，程序在编译时分别将指针和引用添加到符号表上，符号表中记录的是变量名及变量所对应地址。

指针变量在符号表上对应的地址值 #为指针变量的地址值
而引用在符号表上对应的地址值 #为引用对象的地址值（与实参名字不同，地址相同）。

符号表生成之后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改。

## 你什么情况用指针当参数，什么时候用引用，为什么？
# 使用引用参数的主要原因有两个：
程序员能修改调用函数中的数据对象
通过传递引用而不是整个数据–对象，可以提高程序的运行速度

#一般的原则：对于使用引用的值而不做修改的函数：

如果数据对象很小，如内置数据类型或者小型结构，则按照值传递；
如果数据对象是数组，则使用指针（唯一的选择），并且指针声明为指向const的指针；
如果数据对象是较大的结构，则使用const指针或者引用，已提高程序的效率。这样可以节省结构所需的时间和空间；
如果数据对象是类对象，则使用const引用（传递类对象参数的标准方式是按照引用传递）；

#对于修改函数中数据的函数：

如果数据是内置数据类型，则使用指针
如果数据对象是数组，则只能使用指针
如果数据对象是结构，则使用引用或者指针
如果数据是类对象，则使用引用


