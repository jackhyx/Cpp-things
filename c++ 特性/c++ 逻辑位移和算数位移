
逻辑移位：无论是左移还是右移，空缺部分都是直接补0。移出的位数要么到了更高位，要么直接丢弃。取决于你的数据类型。

算术移位: 左移与逻辑移位完全相同，右移的时候左边的空缺位补0还是补1，根据符号位来；
# 如果是正数，则补0，
# 如果是负数，则补1 ##

对于无符号类型的数据，所有移位操作都是逻辑移位。

对于有符号类型的数据，依据编译器不同而选择到底采用逻辑移位还是算术移位。（所以平台不同会导致移植性问题！）


只要移出的数据不被舍弃，无论是逻辑移位还是算术移位都类等于乘除
因此产生算术右移的时候补的数和符号位一致的原因：右移的时候左边的空缺位补0还是补1，根据符号位来；

很多人喜欢用移位来代替乘除法（效率更高）；
但是注意：
数据类型，有符号还是无符号?
数据位数，左移时会不会由于位数不够而高位被舍弃？

