leetcode 

904. 水果成篮  middle
你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。

你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：

你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。
你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。
一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。
给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。

该题本质就是求最多包含两个（k=2）不同字符的滑窗窗口大小。

class Solution {
public:
    int totalFruit(vector<int>& tree) {
        unordered_map<int, int> window;
        const int k = 2;
        int res = 0;
        
        for (int i = 0, j = 0; i < tree.size(); i++) {
            window[tree[i]]++;
            while (window.size() > k) {
                window[tree[j]]--;
                if (window[tree[j]] == 0) {
                    window.erase(tree[j]);
                }
                j++;
            }
            res = max(res, i - j + 1);
        }

        return res;
    }
};


 

76. 最小覆盖子串 hard

给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 "" 。

class Solution {
public:
    string minWindow(string s, string t) {
        unordered_map <char, int> hs, ht;
        string res;
        int count = 0;
        
        for (auto c : t) ht[c]++;

        for (int i = 0, j = 0; i < s.size(); i++) {
            hs[s[i]]++;


            if (hs[s[i]] <= ht[s[i]]) count++;


            while (hs[s[j]] > ht[s[j]]) hs[s[j++]]--;


            if (count == t.size()) {
                if (res.empty() || (i - j + 1) < res.size()) {
                    res = s.substr (j, i - j + 1);
                }
            }    
        }
        return res;
    }
};

