 
1.内部实现

哈希类型的内部编码有两种：ziplist(压缩列表),hashtable(哈希表)。
只有当存储的数据量比较小的情况下，Redis 才使用压缩列表来实现字典类型。具体需要满足两个条件：
1.当哈希类型元素个数小于hash-max-ziplist-entries配置（默认512个）
2.所有值都小于hash-max-ziplist-value配置（默认64字节）
ziplist使用更加紧凑的结构实现多个元素的连续存储，所以在节省内存方面比hashtable更加优秀。
当哈希类型无法满足ziplist的条件时，Redis会使用hashtable作为哈希的内部实现，因为此时ziplist的读写效率会下降，而hashtable的读写时间复杂度为O（1）。



3. 使用场景
3.1 存储对象
Redis哈希对象常常用来缓存一些对象信息，如用户信息、商品信息、配置信息等。

3.2 购物车
很多电商网站都会使用 cookie实现购物车，也就是将整个购物车都存储到 cookie里面。
这种做法的一大优点:无须对数据库进行写入就可以实现购物车功能,这种方式大大提高了购物车的性能
而缺点则是程序需要重新解析和验证( validate) cookie,确保cookie的格式正确,并且包含的商品都是真正可购买的商品
cookie购物车还有一个缺点:因为浏览器每次发送请求都会连 cookie一起发送,所以如果购物车cookie的体积比较大,那么请求发送和处理的速度可能会有所降低。
购物车的定义非常简单:我们以每个用户的用户ID(或者CookieId)作为Redis的Key,每个用户的购物车都是一个哈希表,这个哈希表存储了商品ID与商品订购数量之间的映射。

3.3 计数器
Redis哈希表作为计数器的使用也非常广泛，它常常被用在记录网站每一天、一月、一年的访问数量。
