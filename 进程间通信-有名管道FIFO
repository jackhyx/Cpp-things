无名管道提供了一个简单机制，允许一对进程通信。然而，只有当进程相互通信时，普通管道才存在。
对于 UNIX 和 Windows 系统，一旦进程已经完成通信并且终止了，那么普通管道就不存在了。

有名管道提供了一个更强大的通信工具。通信可以是双向的，并且父子关系不是必需的，当建立了一个有名管道后，多个进程都可用它通信。
事实上，在一个典型的场景中，一个有名管道有几个写者。此外，当通信进程完成后，有名管道继续存在。
虽然 UNIX 和 Windows 系统都支持有名管道，但是实现细节具有很大不同。下一步，我们探索这些系统的有名管道。

对于 UNIX，有名管道为 FIFO。一旦创建，它们表现为文件系统的典型文件。
通过系统调用 mkfifo()，可以创建 FIFO，通过系统调用 open()、read()、write()和close()，可以操作 FIFO。
FIFO 会一直存在，直到它被显式地从文件系统中删除。虽然 FIFO 允许双向通信，但只允许半双工传输（数据在同一时间内只能按一个方向传输）。
如果数据要在两个方向上传输，那么通常使用两个 FIFO。此外，通信进程应位于同一台机器上。
如果需要不同系统之间的通信，那么应使用套接字。

与 UNIX 系统相比，Windows 系统的有名管道通信机制更加丰富
允许全双工通信（数据在同一时间内可在两个方向上传输），并且通信进程可以位于同一机器或不同机器
此外，UNIX 的 FIFO 只支持字节流的数据，而 Windows 系统允许字节流或消息流的数据
通过函数 CreateNamedPipe()，可创建有名管道；通过函数 ConnectNamedPipe()，客户可连接到有名管道。通过函数 ReadFile() 和 WriteFile()，可进行有名管道的通信

总结：
1. 有名管道，无需亲缘关系，多个进程可以使用，通信完成后，继续存在。

2. Unix和window实现细节不同：

2.1 Unix中调用mkfifo()创建，一直存在，直到显示从文件系统中删除
#半双工通信，数据如果要在两个方向传输，需要两个FIFO文件
#只支持字节流
#通信进程位于一台机器
#不同机器应使用socket

2.2 windows通过函数 CreateNamedPipe()，可创建有名管道
#允许全双工通信
#通信进程可以位于一台机器或者不同机器
#支持字节流或者消息流
